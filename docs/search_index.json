[["index.html", "Single-Cell Bioinformatics: From Technology to Analysis Methodologies Preferance", " Single-Cell Bioinformatics: From Technology to Analysis Methodologies İrem B. GÜNDÜZ 2025-05-11 Preferance "],["why-single-cell-analysis.html", "Chapter 1 Why Single-Cell Analysis?", " Chapter 1 Why Single-Cell Analysis? Single-cell sequencing was selected as the method of the year in 2013 by Nature. (2014) Ever since then, besides of the methodology and the algorithms, the popularity of the single-cell sequencing improved. However, why do we need to use a sequencing method focused on a single cell when we can have bulk sequencing data? FIGURE 1.1: 10X Genomics Molecular Profiling of Single-Cell vs Bulk Sequencing (2019) The short answer is the limitations of bulk sequencing. If you want to analyze the immune response profiles of different patients using blood samples, using bulk sequencing data may not be beneficial. Blood is a complex mixture of various cell types. The bulk sequencing averages all cells within the sample. As a result, the data you have will be the average expression profile of all cells in the sample. Single-cell sequencing technology allows profiling different cells in samples. In Table 1, the comparison between bulk and single-cell sequencing was given. TABLE 1.1: Properties of Bulk vs Single-Cell Sequencing Bulk Sequencing Single-Cell Sequencing Average gene expression from all cells Each cell acts as a unique sample Average might not be representative Rare cell types can be lost Cellular heterogeneity is masked Resolves cellular heterogeneity Data is dense Data can be sparse and noisy Is a more robost technology Increases statistical power Cell aggregates Can be costly References 10xGenomics. 2019. “Single-Cell RNA-Seq: An Introductory Overview and Tools for Getting Started. Retrieved 06-08-2019. https://community.10xgenomics.com/t5/10x-Blog/Single-Cell-RNA-Seq-An-Introductory-Overview-and-Tools-for/ba-p/547.” 10xGenomics, 5–9. https://www.10xgenomics.com/blog/single-cell-rna-seq-an-introductory-overview-and-tools-for-getting-started. “Method of the Year 2013.” 2014. Nature Publishing Group. https://doi.org/10.1038/nmeth.2801. "],["single-cell-rna-seq-technologies.html", "Chapter 2 Single-Cell RNA-seq Technologies 2.1 Plate-Based SMART-seq 2.2 MARS-seq 2.3 Droplet Microfluidics (DROP-seq) 2.4 10X Genomics Chromium 2.5 Nanowell Platforms 2.6 Sample Indexing (Illumina) 2.7 Single-cell Combinatorial Indexing: sciRNA-seq", " Chapter 2 Single-Cell RNA-seq Technologies FIGURE 2.1: Explosion of scRNA-seq Throughput (2018) Technological advances increase the efficiency of single-cell sequencing methods while the cost decreases day by day. In this chapter, we will briefly go through some of the single-cell RNA-seq technologies. 2.1 Plate-Based SMART-seq SMART-seq is a plate-based single-cell RNA-seq method that captures full-length transcripts using oligo(dT) priming and template-switching reverse transcriptase. Each cell is sorted (e.g., via FACS) into individual wells of a 96- or 384-well plate. The cDNA is amplified using PCR, and sequencing libraries are prepared from this amplified cDNA. SMART-seq and its improved version SMART-seq2 are well-suited for detecting isoforms and lowly expressed genes. Advantages of SMART-seq: Full-length transcript coverage — useful for isoform and splicing analysis High sensitivity, low dropout rate Compatible with rare/low-throughput samples Limitations of SMART-seq: Lower throughput than droplet-based methods Higher cost and hands-on time per cell Not UMI-based — less accurate quantification 2.2 MARS-seq MARS-seq (Massively Parallel Single-Cell RNA-Seq) is another plate-based scRNA-seq method that focuses on 3’ end-tagged sequencing. Cells are sorted into 384-well plates containing barcoded primers for mRNA capture. Unique molecular identifiers (UMIs) and well-specific barcodes are introduced during reverse transcription. After cDNA synthesis, all reactions are pooled for linear amplification by IVT (in vitro transcription), followed by library preparation. Advantages of MARS-seq: Well-suited for profiling many cells in parallel Supports UMIs — accurate transcript quantification Suitable for low-input samples and immune profiling Limitations of MARS-seq: 3′ bias — cannot resolve isoforms Requires customized primers and plate setup Slightly lower sensitivity compared to SMART-seq 2.3 Droplet Microfluidics (DROP-seq) FIGURE 2.2: Extraction and Processing of Single-Cell Transcriptomes by Drop-Seq (2015) DROP-seq enables high throughput profiling of thousands of individual cells in a short period of time by encapsulating each cell individually with a unique barcode in a droplet. The process takes place within a microfluidic device. FIGURE 2.3: Drop-Seq barcoding scheme After dissociating the complex tissue sample into individual cells, each cell is suspended in droplets with microparticle beads which deliver barcoded primers within a microfluidic device. When cells within the droplet are lysed, the mRNA of these cells is attached to microparticles.A set of beads are generated with the reverse transcription of mRNAs into cDNAs. These sets of beads are called STAMPs, “single-cell transcriptomes attached to microparticles”. Finally, an RNA-seq library with about 10,000 single-cell transcriptomes was constructed by barcode STAMPs amplifying. FIGURE 2.4: Sequence of primers on the microparticle Each barcoded primer bead contains an unique cell barcode and, an unique molecular identifiers (UMI)s along with the common PCR handle. The common PCR handle sequences used for PCR amplification after STAMPs formation. The cell barcodes are unique for each droplets, therefore, each microparticles contains primers with the same cell barcode. UMIs are unique barcodes to each transcript, UMIs are counted digitially to count unique number of mRNA transcripts. And, counting UMIs also removes the uncertainty of PCR duplicates from transcript copy numbers. Limitations of DROP-seq: Most of the droplets are empty and, very few of the droplets contains both a cell and microparticle. Thus, it is not an efficient method. 2.4 10X Genomics Chromium FIGURE 2.5: 10x Genomics Chromium scheme (2017) The 10X Genomics method is very similar to DROP-seq and, it is first described in (2017). First, the barcoded beads are mixed with the cell suspension. Then, the mixture is capsulated with the emulsion generated by oil. The microfluidic device and the barcoded beads of the 10X Genomics are engineered to increase the efficiency of barcoding cells. Therefore almost 90% of the droplets contain a cell and a barcoded bead. The main difference between the 10X Genomics Chromium and DROP-seq is the reverse transcription occurs within the droplets. After the amplification process, the transcriptomics library is constructed. For each lanes of a 10X Genomics Chromium chip, approximately 20,000 cells can be barcoded and sequenced simultaneously. Advantages of 10X Genomics Chromium: 10X Genomics is a commercial platform Data obtained is high-throughput Almost 10,000s reads per cell Fast, inexpensive 3’ transcript sequencing Single-nucleus sequencing possible Less bias by cell morphology Only captures nuclear RNA 2.5 Nanowell Platforms Nanowell-based scRNA-seq platforms isolate single cells into thousands of tiny wells patterned on a microchip. Each well contains one cell, and barcoded beads or primers are then added to each well. After cell lysis, mRNAs are captured by the barcoded oligos on beads, similar to Drop-seq, followed by reverse transcription and cDNA amplification. Common nanowell-based methods include Seq-Well and BD Rhapsody, which allow moderate throughput and compatibility with fragile cell types. These platforms combine physical cell isolation with scalable processing. Advantages of Nanowell Platforms: - Gentle on cells — suitable for fragile or rare populations - More control over cell-bead pairing than droplet systems - Lower equipment complexity vs. droplet microfluidics Limitations of Nanowell Platforms: - Lower throughput than 10X or Drop-seq - More manual steps — potential for variability - Limited capture efficiency compared to high-end droplet systems 2.6 Sample Indexing (Illumina) Sample indexing involves tagging different samples or individual cells with unique barcode sequences (index tags) during library preparation. These tags are incorporated either via adapter ligation or during PCR amplification. After sequencing, reads are demultiplexed based on these indexes, enabling multiplexing of multiple samples in a single sequencing run. This method is widely used in plate-based protocols like SMART-seq2 and is foundational in many combinatorial indexing strategies. Advantages of Sample Indexing: - Cost-efficient multiplexing of samples or conditions - Increases throughput without added sequencing lanes - Compatible with standard Illumina sequencing workflows Limitations of Sample Indexing: - Barcode swapping or misassignment can affect data accuracy - Limited by the number of unique index combinations - Cannot handle extremely large numbers of cells without additional combinatorial strategies 2.7 Single-cell Combinatorial Indexing: sciRNA-seq sci-RNA-seq (single-cell combinatorial indexing RNA-seq) enables profiling of thousands to millions of cells without physically isolating each cell. Instead, it uses combinatorial barcoding in multiple rounds of pooling and splitting cells or nuclei, introducing unique barcode combinations in each round (e.g., via transposase or reverse transcription primers). The method begins with cells or nuclei distributed across multiple wells, where the first set of barcodes is introduced. The contents are then pooled and redistributed, and another set of barcodes is applied. This process repeats across multiple rounds, allowing millions of uniquely labeled single-cell transcriptomes. Advantages of sci-RNA-seq: - Ultra-high throughput — millions of cells can be profiled - No need for droplet microfluidics or physical single-cell isolation - Can be applied to fixed or frozen cells and nuclei - Compatible with multi-omic profiling (e.g., sci-ATAC-seq) Limitations of sci-RNA-seq: - Lower transcript capture efficiency than droplet-based methods - Complex data processing and barcode decoding - May require deep sequencing to resolve sparse expression profiles References Macosko, Evan Z., Anindita Basu, Rahul Satija, James Nemesh, Karthik Shekhar, Melissa Goldman, Itay Tirosh, et al. 2015. “Highly Parallel Genome-Wide Expression Profiling of Individual Cells Using Nanoliter Droplets.” Cell 161 (5): 1202–14. https://doi.org/https://doi.org/10.1016/j.cell.2015.05.002. Svensson, Valentine, Roser Vento-Tormo, and Sarah A. Teichmann. 2018. “Exponential scaling of single-cell RNA-seq in the past decade.” Nature Publishing Group. https://doi.org/10.1038/nprot.2017.149. Zheng, Grace, Jessica Terry, Phillip Belgrader, Paul Ryvkin, Zachary Bent, Ryan Wilson, Solongo Ziraldo, et al. 2017. “Massively Parallel Digital Transcriptional Profiling of Single Cells.” Nature Communications 8 (January): 14049. https://doi.org/10.1038/ncomms14049. "],["single-cell-rna-seq-data-processing-and-quality-control.html", "Chapter 3 Single-cell RNA-seq Data Processing and Quality Control 3.1 Cell Ranger Pipeline 3.2 Demultiplexing 3.3 STAR: Ultrafast Universal RNA-seq Aligner 3.4 Transcript Quantification: KALLISTO 3.5 The Single-Cell Data 3.6 Data normalization 3.7 Dealing with Batch Effects 3.8 Data cleanup (filtering) 3.9 Empty Droplets 3.10 Doublet detection and removal: demuxlet 3.11 Doublet detection and removal: DoubletFinder 3.12 Doublet detection and removal: Scrublet 3.13 Issues of the Single-Cell Data 3.14 Data imputation / Data Smoothing 3.15 MAGIC (Markov Affinity-based Graph Imputation of Cells)", " Chapter 3 Single-cell RNA-seq Data Processing and Quality Control Once the raw data is obtained, the first thing to do is to check the quality of the reads and process it accordingly. In this chapter, we will go through quality control and processing methods for single-cell data. 3.1 Cell Ranger Pipeline FIGURE 3.1: Cell Ranger Pipeline (2019) In 10X Genomics workflow, which is the main workflow that is commonly used nowdays, Cell Ranger pipeline is used to process Chromium single-cell data to generating feature-barcode matrices, reading alignment, filtering, clustering and perform other secondary analysis methodologies.(2019) Cell Ranger identifies each sample, cell and molecule. Identification done by using sequencing barcodes (eg. Illumina i7 and i5 indices) for samples, cell-specific barcodes for cells and, UMIs for molecules. The typical Cell Ranger results looks like this: FIGURE 3.2: Cell Ranger Pipeline Results (2019) In the previous chapter, we mentioned that some of the droplets may contain no cells. In the qc summary report of the Cell Ranger pipeline, Cell Ranger predicts the number of cells within the inputed data and print the estimation in “Estimated Number of Cells” section. The “Barcode Rank Plot” indicates the droplets that contains bead but no cell with the grey color. To determine a cut-off and remove noisy data, bioinformaticians benefit from this plot. The “Mapping” section of the report indicates percantage of reads that is aligned successfully to the genome. HINT : If the mapping rate is low and, you are working with the pure data (eg. human data) that may indicate contamination. NOTE : Cell Ranger prints error, if there is a quality issue. 3.1.1 FASTQ File Format High-throughput sequencing reads usually outputs FASTQ files. Cell Ranger pipeline produces FASTQ files as well. Let’s take a look at the FASTQ file format below. FIGURE 3.3: Structure of a FASTQ file Each FASTQ file contains three parts. The first line of the FASTQ file that starts with @, contains the read identifier, which indicates the position on the flowcell. The DNA sequence starts from the second line. And the line comes before another read identifier contains the per-base sequencing quality score (also called PHRED score). The formula of the PHRED score is given below where P is the “Probability of base calling error”. FIGURE 3.4: The formula of the PHRED score 3.1.2 Sequencing Quality : FASTQC tool Sequence quality can be determined by FASTQC tool. FASTQC tool provides simple quality control check on raw sequence data that comes from high throughput sequencing pipelines. Anders (2010) FIGURE 3.5: FASTQC Results FASTQC tool provides: Summary statistics (number of reads, …) Sequencing quality summaries Sequence biases Duplicate reads Sequence contamination (adapters, etc.) 3.1.3 Read trimming Sequencing data analysis pipelines modify the read sequences produced by a sequencer. There may be sequence biases due to structural oligonucleotides (adapters, etc.) and low-quality sequences. Trimming at reading ends is done as the first operation in a pipeline to avoid sequence biases. FIGURE 3.6: High-throughput sequencing pipeline scheme There are several softwares present to apply trimming, frequently used ones are: CellRanger cutadapt Trim Galore! SeqPurge trimmomatic 3.2 Demultiplexing FIGURE 3.7: Data processing pipeline workflow. Although the high-throughput sequencing methods provides data with good quality, errors via PCR can be introduced when preparing the library. When working with working with single-cell RNA sequencing data the initial cDNA libraries undergo PCR amplification multiple times. Thus, PCR errors are often introduced when preparing single-cell RNA sequencing library. Demultiplex is a simple sequencing error correction algorithm used to prevent this kind of errors. Zhang et al. (2018) Demultiplexing indicates identification of cell barcodes, assigning cell-barcode to the associated reads and, filtration of cell-barcodes. If the data contains UMIs, UMI codes are mapped to the read name of the gene-body containing read. UMIs are counted for each cell and gene thus, duplicates are avoided. Genes are identified via sequence mapping. And, if the expected cell-barcodes are known, assigned barcodes are filtered accordingly. Demultiplexing is done differently depending on the protocol and the pipeline of choice. In general, the data obtained from paired-end full transcript protocols and, Smart-seq2 are already be demultiplexed. If the data was not demultiplexed, you need to apply it yourself depending on the protocol used to produce raw data. 3.3 STAR: Ultrafast Universal RNA-seq Aligner After trimming and, prof the data has good quality, the data needs to be mapped to the corresponding reference genome. This mapping process is called alignment and, it is necessary if we’re interested in gene expression analysis (eg. differential gene expression analysis, quantifying etc.) Kallisto and STAR are the most popular alignement tools. Dobin et al. (2013) FIGURE 3.8: STAR workflow.(2017) In summary, STAR searchs for the longest sequence in the data that is also present in the reference genome using an uncompressed suffix array (SA). This process is called seed searching. The longest matching sequences are called “the Maximal Mappable Prefixes (MMPs)”. The MMP side and the unread side are named as different seeds (eg seed1,seed2). After finding MMP, STAR searchs for the next the longest sequence. If an exact matching sequence for each part of the read is not found,the previous MMPs will be extended. And, if extending the previous MMPs oes not give a good alignment, then the poor quality or adapter sequence (or other contaminating sequence) will be soft clipped. These process is repeated for each for unmapped part of the read in forward and reverse directions. Dobin et al. (2013) STAR detects splicing events in this way, because of that,it also called splice aware aligner. Then seeds are clustered by proximity to ‘anchor’ seeds (or uniquely mapping seeds) and, seeds are stitched together based on alignment score using dynamic programming. The scoring done based on matches, mismatches, insertions, deletions and splice junction gaps. Mistry, M. Freeman, B. Piper (2017) 3.4 Transcript Quantification: KALLISTO FIGURE 3.9: Kallisto workflow.(2016) While STAR is a read-alinger, Kallisto is a pseudo-aligner. That means, while STAR mapp reads to a reference genome, Kallisto mapps k-mers. Kallisto assign reads to transcripts without assigning specific positions for each base. Instead, it uses a Transcriptome de Bruijn Graph (T-DBG). A k-mer is a nucleotide sequence that length k derived from a read. Each transcript act as a path through the graph and, transcriptome reference represented as consecutive k-mers. Kallisto maps reads to splice isoforms rather than genes. Bray et al. (2016) EM-algorithm is used to estimate transcript abundance and optimize compatibility (likelihood). Intersection of vertex compatibility classes indicates compatible transcripts. FIGURE 3.10: The EM algorithm formula. K-mers of reads can be mapped to vertices using their exact matches (also called hashing). Read compatibility is found by matching the read mapping with transcript-induced paths (compatibility classes). It is much more faster than read-aligners. Pseudo-aligners can cope better with sequencing errors. For example, if k is sufficiently large, the error k-mers may not be part of the transcriptome and can be ignored. 3.5 The Single-Cell Data FIGURE 3.11: Representation of the single-cell count data The raw counts of single-cell data are integers. The count matrices are sparse but, high dimensional. Therefore, feature selection and, dimensional reduction methods are necessary. FIGURE 3.12: Representation of the sparse data (2009) If the matrix has zero values for most elements, it can be considered as sparse data. The sparsity can be determined by the Number of Non-Zero (NNZ) ratio of elements. If the NNZ ratio is above 0.5 data can be considered as sparse data. FIGURE 3.13: Representation of the Coordinate Matrix (COO) (2009) To save memory, the sparse data can be stored in a coordinate matrix (COO). Only the non-zero elements stored as vectors and their respective indices in a COO. Thus, more efficient and less biased computation can be done on data. FIGURE 3.14: Compressed Sparse Row (2009) The Compressed Sparse Row (CSR) format is designed for more efficient indexing and computation and, it can be considered as “read-only”. The data (x) within the CSR consist of non-zero elements, index (i). Length = length of x Column indices of non-zero data FIGURE 3.15: Compressed Sparse Column (2009) Compressed Sparse Column (CSC) works exactly the same as CSR. But, instead of row based index,CSC has column based index pointers. Pointers (p): Length = number of rows + 1 Cumulative number of non-zero elements Differences indicate number of non-zero elements per row 3.6 Data normalization FIGURE 3.16: Single-cell sequencing counts Single-cell sequencing data needs to be normalized to make quantifications comparable across cells and, mitigate cell-specific coverage biases. There are several methods present for normalizing the single-cell sequencing data. Hafemeister and Satija (2019) Within-sample normalization. FIGURE 3.17: Within-sample normalization formulas. Non-linear normalization FIGURE 3.18: Non-linear normalization formulas. Scaling: z-score FIGURE 3.19: Scaling: z-score formula. Scale genes to mean 0 and variance 1 Weight genes equally in downstream analysis Often used for visualization Advanced methods for computing scaling factors DESeq, edgeR: pseudo-reference sample scran: robustness through pooling and deconvolution of cells sctransform: Can incorporate other covariates besides total counts for batch correction Avoid overfitting by regularization of fitted parameters over all genes 3.7 Dealing with Batch Effects FIGURE 3.20: Representation of batch effect and, the ComBat formula. There may be variations in the single-cell sequencing data due to confounding factors. These variations are called batch effects. Ideally, batch effects needs to be identified and corrected. Batch effects can be identified in exploratory analysis (dimensionality reduction, clustering, etc.) if adequate annotation is provided. Identified batch effects can be corrected by simple linear models (eg ComBat: empirical Bayes approach). The confounding factors that may cause batch effects are listed as below: Cell collection date Instruments and protocols used Cell environments Genetic population Factors that are not the focus of the analysis NOTE: Batch effects can only be corrected for if experiments are designed in a non-confounded way. Sample groups need to be split across experimental batches 3.8 Data cleanup (filtering) Along with the sparsity, single-cell sequencing data may contain uninformative data. This kind of uninformative data may be due to several reasons such as dying cells, cells with broken membranes and, doublets. These conditions are examples of outlier barcodes. We need to filter the data to remove the uninformative data. Filtration is done by removing the cells using metric thresholding ,removing genes and, removing droplets. Remove cells using metric thresholding: * Number of reads per cell * Number of genes detected per cell * Mitochondrial read fraction (indicates the death and dying cells) Remove genes * Genes expressed in only few cells * Not all genes might be relevant in all contexts (e.g.mitochondrial and ribosomal genes) 3.9 Empty Droplets One barcode should correspond to one cell, but barcodes may not tag any cell (empty droplet) or, barcodes may correspond to multiple cells (multiplets, doublets). when removing droplets,the goal is to remove barcodes not corresponding to actual cells and, retain barcodes corresponding to actual cells with low RNA content. Lun et al. (2019) The simplest way to remove droplets is setting a threshold on UMI counts. 99th percentile (minus 10%) of expected number of cells Filter based on elbow (knee) plot EmptyDrops ambient testing is another option. Fit “ambient distribution” using barcodes below a threshold T Statistically test barcodes whether they significantly deviate from the ambient distribution Good-Turing Smoothing algorithm to test deviation from multinomial (Dirichlet) distribution over all genes Or, Combine ambient testing with thresholding: add high-UMI count barcodes as true cells. 3.10 Doublet detection and removal: demuxlet FIGURE 3.21: Doublet detection with demuxlet (2018) demuxlet is a method that leverages genotype information to detect doublets in genetically diverse cell populations. For each droplet, it uses the likelihood of genotyping calls to infer whether the droplet is a singlet or a doublet. The process involves: Maximum likelihood estimation of genotype matches Modeling doublets as a mixture of two genotype profiles Computing posterior probability for doublet classification This approach is powerful when donor genotypes are known and enables reliable assignment of cells to individuals in multiplexed samples. 3.11 Doublet detection and removal: DoubletFinder FIGURE 3.22: Doublet detection with DoubletFinder (2019) DoubletFinder detects doublets by simulating artificial doublets and using a k-nearest-neighbor (KNN) classifier in PCA space. Steps include: Normalizing data and selecting variable genes Simulating doublets by merging transcriptomes Embedding into PCA space Computing proportion of artificial nearest neighbors (pANN) Classifying top cells with highest pANN as doublets Parameter tuning (e.g. expected doublet rate) improves sensitivity. 3.12 Doublet detection and removal: Scrublet FIGURE 3.23: Doublet detection with Scrublet (2019) Scrublet is a Python-based tool that uses simulation and distance-based metrics: Simulates doublets by summing transcriptomes Embeds cells into PCA space Builds KNN graph and calculates doublet score Thresholds doublet score to identify doublets Unlike demuxlet, Scrublet does not require genotype data and can be used with standard single-cell datasets. 3.13 Issues of the Single-Cell Data FIGURE 3.24: Challenges in single-cell RNA-seq data (2014) Single-cell data presents challenges: High sparsity due to dropouts Low coverage for some genes Technical noise and overdispersion Biological variability Common strategies to address these issues: Normalization and scaling Filtering low-quality cells/genes Imputation or pseudobulk aggregation These steps ensure more accurate downstream analysis like clustering or differential expression. 3.14 Data imputation / Data Smoothing We already mentioned that single-cell data is noisy due to missing data and stochastic transcription. Missing values can be imputed via several methods, this process called data smoothing (eg data imputation). FIGURE 3.25: Representation of Data imputation / Data Smoothing in single-cell RNA-seq data Imputation may be beneficial however, we must be careful with over smoothing. Over smoothing indicates false positives in differential analysis or artificial clusters. To detect over smoothing, downstream analysis on smoothed data needs to be carefully considered. Andrews and Hemberg (2018) Here are the most popular imputation tools/softwares: scImpute: log-normal model detects dropout events and imputes using profiles from similar cells SAVER: negative binomial distribution modeling Knn-smooth: nearest neighbors dca: autoencoder MAGIC: diffusion netSmooth 3.15 MAGIC (Markov Affinity-based Graph Imputation of Cells) FIGURE 3.26: Imputation with MAGIC (2018) MAGIC is one of the sophisticated imputation/smoothing methods. MAGIC assumes that neighbors are informative. In summary, MAGIC algorithm calculates the gene scores signal across neighbors (nearby) cells and, impute gene scores based on this signal. The overall MAGIC workflow is given below. FIGURE 3.27: The MAGIC workflow (2018) MAGIC calculates the distance between neighbors and, the affinity of the neighbors. Then, learns from this manifold data with the implemented manifold learning algorithm. As a result, MAGIC construct a graph and, use it to impute the features. Dijk et al. (2018) FIGURE 3.28: The formulas used in MAGIC imputation (2018) References 10xGenomics. 2019. “Single-Cell RNA-Seq: An Introductory Overview and Tools for Getting Started. Retrieved 06-08-2019. https://community.10xgenomics.com/t5/10x-Blog/Single-Cell-RNA-Seq-An-Introductory-Overview-and-Tools-for/ba-p/547.” 10xGenomics, 5–9. https://www.10xgenomics.com/blog/single-cell-rna-seq-an-introductory-overview-and-tools-for-getting-started. Anders, Simon. 2010. “Babraham Bioinformatics - FastQC A Quality Control tool for High Throughput Sequence Data.” https://www.bioinformatics.babraham.ac.uk/projects/fastqc/. Andrews, Tallulah S., and Martin Hemberg. 2018. “False signals induced by single-cell imputation.” F1000Research 7: 1740. https://doi.org/10.12688/f1000research.16613.1. Bray, Nicolas L., Harold Pimentel, Páll Melsted, and Lior Pachter. 2016. “Near-optimal probabilistic RNA-seq quantification.” Nature Biotechnology 34 (5): 525–27. https://doi.org/10.1038/nbt.3519. Dijk, David van, Roshan Sharma, Juozas Nainys, Kristina Yim, Pooja Kathail, Ambrose J. Carr, Cassandra Burdziak, et al. 2018. “Recovering Gene Interactions from Single-Cell Data Using Data Diffusion.” Cell 174 (3): 716–729.e27. https://doi.org/10.1016/j.cell.2018.05.061. Dobin, Alexander, Carrie A. Davis, Felix Schlesinger, Jorg Drenkow, Chris Zaleski, Sonali Jha, Philippe Batut, Mark Chaisson, and Thomas R. Gingeras. 2013. “STAR: Ultrafast universal RNA-seq aligner.” Bioinformatics 29 (1): 15–21. https://doi.org/10.1093/bioinformatics/bts635. Eding, Matt. 2009. “Sparse Matrices.” In, 419–44. https://doi.org/10.1201/9781439811481.ch20. Hafemeister, Christoph, and Rahul Satija. 2019. “Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression.” Genome Biology 20 (1): 1–15. https://doi.org/10.1186/S13059-019-1874-1/FIGURES/6. Kang, Hyun Min, Manasa Subramaniam, Sheila Targ, Mai Nguyen, Lenka Maliskova, Erin McCarthy, Emily Wan, et al. 2018. “Multiplexed Droplet Single-Cell RNA-Sequencing Using Natural Genetic Variation.” Nature Biotechnology 36 (1): 89–94. https://doi.org/10.1038/nbt.4042. Kharchenko, Peter V, Lev Silberstein, and David T Scadden. 2014. “Bayesian Approach to Single-Cell Differential Expression Analysis.” Nature Methods 11: 740–42. https://doi.org/10.1038/nmeth.2967. Lun, Aaron, Samantha Riesenfeld, Tallulah Andrews, The Dao, Tomas Gomes, and John Marioni. 2019. “EmptyDrops: Distinguishing Cells from Empty Droplets in Droplet-Based Single-Cell RNA Sequencing Data.” Genome Biology 20 (March): 63. https://doi.org/10.1186/s13059-019-1662-y. McGinnis, Christopher S, Lauren M Murrow, and Zev J Gartner. 2019. “DoubletFinder: Doublet Detection in Single-Cell RNA Sequencing Data Using Artificial Nearest Neighbors.” Cell Systems 8 (4): 329–337.e4. https://doi.org/10.1016/j.cels.2019.03.003. Mistry, M. Freeman, B. Piper, M. 2017. “Alignment with STAR | Introduction to RNA-Seq using high-performance computing.” https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html. Wolock, Samuel L, Ramon Lopez, and Allon M Klein. 2019. “Scrublet: Computational Identification of Cell Doublets in Single-Cell Transcriptomic Data.” Cell Systems 8 (4): 281–291.e9. https://doi.org/10.1016/j.cels.2018.11.005. Zhang, Xiannian, Tianqi Li, Feng Liu, Yaqi Chen, Jiacheng Yao, Zeyao Li, Yanyi Huang, and Jianbin Wang. 2018. “Comparative Analysis of Droplet-Based Ultra-High-Throughput Single-Cell RNA-Seq Systems.” Molecular Cell 73 (November). https://doi.org/10.1016/j.molcel.2018.10.020. "],["methods-used-in-single-cell.html", "Chapter 4 Methods Used in Single-Cell", " Chapter 4 Methods Used in Single-Cell "],["cell-trajectory-inference.html", "Chapter 5 Cell Trajectory Inference", " Chapter 5 Cell Trajectory Inference "],["differential-regulation-and-pathway-analysis-in-single-cell.html", "Chapter 6 Differential Regulation and Pathway Analysis in Single-Cell", " Chapter 6 Differential Regulation and Pathway Analysis in Single-Cell "],["single-cell-epigenomics.html", "Chapter 7 Single-Cell Epigenomics", " Chapter 7 Single-Cell Epigenomics "],["single-cell-atac-seq.html", "Chapter 8 Single-Cell ATAC-seq", " Chapter 8 Single-Cell ATAC-seq "],["single-cell-data-integration.html", "Chapter 9 Single-Cell Data Integration", " Chapter 9 Single-Cell Data Integration "],["single-cell-multiomics.html", "Chapter 10 Single-Cell Multiomics", " Chapter 10 Single-Cell Multiomics "],["single-cell-spatial-transcriptomics.html", "Chapter 11 Single-Cell Spatial Transcriptomics 11.1 Integration of Single-Cell Omics Data 11.2 Horizontal Integration 11.3 Vertical Integration 11.4 Weighted Nearest Neighbors (WNN) 11.5 Bridge Integration 11.6 Deep Learning Approaches: MultiVI 11.7 Single-Cell DNA sequencing", " Chapter 11 Single-Cell Spatial Transcriptomics TODO 11.1 Integration of Single-Cell Omics Data FIGURE 11.1: Challenges in multi-modal integration Integrating single-cell multi-omics data (e.g., scRNA-seq, scATAC-seq) is essential for a holistic understanding of cellular states but comes with challenges: Different modalities have distinct statistical properties Confounding biological and technical sources of heterogeneity Missing values and sparsity across datasets To tackle these, integration methods are categorized into horizontal (across cells or batches) and vertical (across modalities in the same cell) approaches. 11.2 Horizontal Integration Used when cells are assayed with different modalities in different batches. Normalize expression and accessibility (e.g., gene activity as a surrogate for expression) Match shared features across modalities Popular methods include: CCA (Canonical Correlation Analysis): Joint projection into a shared subspace Harmony: Corrects batch effects using soft clustering MNN (Mutual Nearest Neighbors): Aligns cell neighborhoods Scanorama, BBKNN, LIGER: Graph- or matrix-based manifold stitching approaches FIGURE 11.2: CCA-based integration of scRNA and scATAC (2019) 11.3 Vertical Integration Used when different omics layers are measured from the same cell (e.g., 10x Multiome). 11.3.1 MOFA / MOFA+ Probabilistic factor model with sparsity-aware priors Captures shared and modality-specific sources of variation Enables batch correction, dimensionality reduction, and imputation FIGURE 11.3: MOFA+ framework for joint dimensionality reduction (2020) 11.3.2 LIGER (Linked Inference of Genomic Experimental Relationships) Non-negative matrix factorization Joint clustering via shared factor neighborhood graphs Learns both dataset-specific and shared gene modules FIGURE 11.4: LIGER joint clustering (2019) 11.4 Weighted Nearest Neighbors (WNN) WNN builds modality-specific KNN graphs and learns weights for each modality per cell, generating a unified WNN graph for clustering and downstream analysis. Combines transcriptome and epigenome information Scales well and supports imputation when one modality is missing FIGURE 11.5: WNN: Combining cell-cell similarities across modalities (2021) 11.5 Bridge Integration Uses multi-omics data as a “dictionary” to integrate separately measured scRNA and scATAC datasets via shared latent spaces. Dictionary learning maps cells to atoms in multiome reference Use PCA, LSI, or CCA for initial embeddings Mutual nearest neighbors refine integration FIGURE 11.6: Bridge integration framework (2022) 11.6 Deep Learning Approaches: MultiVI MultiVI is a variational autoencoder for learning a joint latent space of scRNA and scATAC: Models transcriptome (NB) and accessibility (Bernoulli) Trained on multiome or paired data Supports imputation, batch correction, and latent space learning FIGURE 11.7: MultiVI for integrative latent representation (2021) 11.7 Single-Cell DNA sequencing To detect genomic variations in the genomic heterogenetity It’s most beneficial when apply to sequence bacterial genomes. References Argelaguet, Ricard, Denis Arnol, Dmitry Bredikhin, Yann Deloro, Benedikt Velten, John C. Marioni, and Oliver Stegle. 2020. “MOFA+: A Statistical Framework for Comprehensive Integration of Multi-Modal Single-Cell Data.” Genome Biology 21: 111. https://doi.org/10.1186/s13059-020-02015-1. Ashuach, Tal, Mariano Gabitto, Michael I Jordan, and Nir Yosef. 2021. “MultiVI: Deep Generative Model for the Integration of Multi-Modal Data.” bioRxiv. https://doi.org/10.1101/2021.08.20.457057. Hao, Yuhan, Stephanie Hao, Erin Andersen-Nissen, et al. 2022. “Bridge Integration of Single-Cell Multi-Omics Data with Dictionary Learning.” bioRxiv. https://doi.org/10.1101/2022.02.24.481684. Hao, Yuhan, Stephanie Hao, Erin Andersen-Nissen, William M Mauck III, Shiwei Zheng, Andrew Butler, Madison J Lee, et al. 2021. “Integrated Analysis of Multimodal Single-Cell Data.” Cell 184 (13): 3573–3587.e29. https://doi.org/10.1016/j.cell.2021.04.048. Stuart, Tim, Andrew Butler, Paul Hoffman, Christoph Hafemeister, Efthymia Papalexi, William M Mauck III, Yuhan Hao, Marlon Stoeckius, Peter Smibert, and Rahul Satija. 2019. “Comprehensive Integration of Single-Cell Data.” Cell 177 (7): 1888–1902.e21. https://doi.org/10.1016/j.cell.2019.05.031. Welch, Joshua D, Vanja Kozareva, Arthur Ferreira, Caleb Vanderburg, Craig Martin, and Evan Z Macosko. 2019. “Single-Cell Multi-Omic Integration Compares and Contrasts Features of Brain Cell Identity.” Cell 177 (7): 1873–1887.e17. https://doi.org/10.1016/j.cell.2019.05.006. "],["references.html", "References", " References 10xGenomics. 2019. “Single-Cell RNA-Seq: An Introductory Overview and Tools for Getting Started. Retrieved 06-08-2019. https://community.10xgenomics.com/t5/10x-Blog/Single-Cell-RNA-Seq-An-Introductory-Overview-and-Tools-for/ba-p/547.” 10xGenomics, 5–9. https://www.10xgenomics.com/blog/single-cell-rna-seq-an-introductory-overview-and-tools-for-getting-started. Anders, Simon. 2010. “Babraham Bioinformatics - FastQC A Quality Control tool for High Throughput Sequence Data.” https://www.bioinformatics.babraham.ac.uk/projects/fastqc/. Andrews, Tallulah S., and Martin Hemberg. 2018. “False signals induced by single-cell imputation.” F1000Research 7: 1740. https://doi.org/10.12688/f1000research.16613.1. Argelaguet, Ricard, Denis Arnol, Dmitry Bredikhin, Yann Deloro, Benedikt Velten, John C. Marioni, and Oliver Stegle. 2020. “MOFA+: A Statistical Framework for Comprehensive Integration of Multi-Modal Single-Cell Data.” Genome Biology 21: 111. https://doi.org/10.1186/s13059-020-02015-1. Ashuach, Tal, Mariano Gabitto, Michael I Jordan, and Nir Yosef. 2021. “MultiVI: Deep Generative Model for the Integration of Multi-Modal Data.” bioRxiv. https://doi.org/10.1101/2021.08.20.457057. Bray, Nicolas L., Harold Pimentel, Páll Melsted, and Lior Pachter. 2016. “Near-optimal probabilistic RNA-seq quantification.” Nature Biotechnology 34 (5): 525–27. https://doi.org/10.1038/nbt.3519. Dijk, David van, Roshan Sharma, Juozas Nainys, Kristina Yim, Pooja Kathail, Ambrose J. Carr, Cassandra Burdziak, et al. 2018. “Recovering Gene Interactions from Single-Cell Data Using Data Diffusion.” Cell 174 (3): 716–729.e27. https://doi.org/10.1016/j.cell.2018.05.061. Dobin, Alexander, Carrie A. Davis, Felix Schlesinger, Jorg Drenkow, Chris Zaleski, Sonali Jha, Philippe Batut, Mark Chaisson, and Thomas R. Gingeras. 2013. “STAR: Ultrafast universal RNA-seq aligner.” Bioinformatics 29 (1): 15–21. https://doi.org/10.1093/bioinformatics/bts635. Eding, Matt. 2009. “Sparse Matrices.” In, 419–44. https://doi.org/10.1201/9781439811481.ch20. Hafemeister, Christoph, and Rahul Satija. 2019. “Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression.” Genome Biology 20 (1): 1–15. https://doi.org/10.1186/S13059-019-1874-1/FIGURES/6. Hao, Yuhan, Stephanie Hao, Erin Andersen-Nissen, et al. 2022. “Bridge Integration of Single-Cell Multi-Omics Data with Dictionary Learning.” bioRxiv. https://doi.org/10.1101/2022.02.24.481684. Hao, Yuhan, Stephanie Hao, Erin Andersen-Nissen, William M Mauck III, Shiwei Zheng, Andrew Butler, Madison J Lee, et al. 2021. “Integrated Analysis of Multimodal Single-Cell Data.” Cell 184 (13): 3573–3587.e29. https://doi.org/10.1016/j.cell.2021.04.048. Kang, Hyun Min, Manasa Subramaniam, Sheila Targ, Mai Nguyen, Lenka Maliskova, Erin McCarthy, Emily Wan, et al. 2018. “Multiplexed Droplet Single-Cell RNA-Sequencing Using Natural Genetic Variation.” Nature Biotechnology 36 (1): 89–94. https://doi.org/10.1038/nbt.4042. Kharchenko, Peter V, Lev Silberstein, and David T Scadden. 2014. “Bayesian Approach to Single-Cell Differential Expression Analysis.” Nature Methods 11: 740–42. https://doi.org/10.1038/nmeth.2967. Lun, Aaron, Samantha Riesenfeld, Tallulah Andrews, The Dao, Tomas Gomes, and John Marioni. 2019. “EmptyDrops: Distinguishing Cells from Empty Droplets in Droplet-Based Single-Cell RNA Sequencing Data.” Genome Biology 20 (March): 63. https://doi.org/10.1186/s13059-019-1662-y. Macosko, Evan Z., Anindita Basu, Rahul Satija, James Nemesh, Karthik Shekhar, Melissa Goldman, Itay Tirosh, et al. 2015. “Highly Parallel Genome-Wide Expression Profiling of Individual Cells Using Nanoliter Droplets.” Cell 161 (5): 1202–14. https://doi.org/https://doi.org/10.1016/j.cell.2015.05.002. McGinnis, Christopher S, Lauren M Murrow, and Zev J Gartner. 2019. “DoubletFinder: Doublet Detection in Single-Cell RNA Sequencing Data Using Artificial Nearest Neighbors.” Cell Systems 8 (4): 329–337.e4. https://doi.org/10.1016/j.cels.2019.03.003. “Method of the Year 2013.” 2014. Nature Publishing Group. https://doi.org/10.1038/nmeth.2801. Mistry, M. Freeman, B. Piper, M. 2017. “Alignment with STAR | Introduction to RNA-Seq using high-performance computing.” https://hbctraining.github.io/Intro-to-rnaseq-hpc-O2/lessons/03_alignment.html. Stuart, Tim, Andrew Butler, Paul Hoffman, Christoph Hafemeister, Efthymia Papalexi, William M Mauck III, Yuhan Hao, Marlon Stoeckius, Peter Smibert, and Rahul Satija. 2019. “Comprehensive Integration of Single-Cell Data.” Cell 177 (7): 1888–1902.e21. https://doi.org/10.1016/j.cell.2019.05.031. Svensson, Valentine, Roser Vento-Tormo, and Sarah A. Teichmann. 2018. “Exponential scaling of single-cell RNA-seq in the past decade.” Nature Publishing Group. https://doi.org/10.1038/nprot.2017.149. Welch, Joshua D, Vanja Kozareva, Arthur Ferreira, Caleb Vanderburg, Craig Martin, and Evan Z Macosko. 2019. “Single-Cell Multi-Omic Integration Compares and Contrasts Features of Brain Cell Identity.” Cell 177 (7): 1873–1887.e17. https://doi.org/10.1016/j.cell.2019.05.006. Wolock, Samuel L, Ramon Lopez, and Allon M Klein. 2019. “Scrublet: Computational Identification of Cell Doublets in Single-Cell Transcriptomic Data.” Cell Systems 8 (4): 281–291.e9. https://doi.org/10.1016/j.cels.2018.11.005. Zhang, Xiannian, Tianqi Li, Feng Liu, Yaqi Chen, Jiacheng Yao, Zeyao Li, Yanyi Huang, and Jianbin Wang. 2018. “Comparative Analysis of Droplet-Based Ultra-High-Throughput Single-Cell RNA-Seq Systems.” Molecular Cell 73 (November). https://doi.org/10.1016/j.molcel.2018.10.020. Zheng, Grace, Jessica Terry, Phillip Belgrader, Paul Ryvkin, Zachary Bent, Ryan Wilson, Solongo Ziraldo, et al. 2017. “Massively Parallel Digital Transcriptional Profiling of Single Cells.” Nature Communications 8 (January): 14049. https://doi.org/10.1038/ncomms14049. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
